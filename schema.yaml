openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /blog/api/v1/category/:
    get:
      operationId: blog_api_v1_category_list
      description: model viewset for implement CRUD for category
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - blog
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryList'
          description: ''
    post:
      operationId: blog_api_v1_category_create
      description: model viewset for implement CRUD for category
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /blog/api/v1/category/{id}/:
    get:
      operationId: blog_api_v1_category_retrieve
      description: model viewset for implement CRUD for category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - blog
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    put:
      operationId: blog_api_v1_category_update
      description: model viewset for implement CRUD for category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    patch:
      operationId: blog_api_v1_category_partial_update
      description: model viewset for implement CRUD for category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: blog_api_v1_category_destroy
      description: model viewset for implement CRUD for category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - blog
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /blog/api/v1/post/:
    get:
      operationId: blog_api_v1_post_list
      description: model viewset for implement CRUD for post
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: category
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: published_date__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: published_date__lt
        schema:
          type: string
          format: date-time
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - blog
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostList'
          description: ''
    post:
      operationId: blog_api_v1_post_create
      description: model viewset for implement CRUD for post
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
  /blog/api/v1/post/{id}/:
    get:
      operationId: blog_api_v1_post_retrieve
      description: model viewset for implement CRUD for post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - blog
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    put:
      operationId: blog_api_v1_post_update
      description: model viewset for implement CRUD for post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    patch:
      operationId: blog_api_v1_post_partial_update
      description: model viewset for implement CRUD for post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPost'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    delete:
      operationId: blog_api_v1_post_destroy
      description: model viewset for implement CRUD for post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - blog
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /comments/api/v1/comments/:
    get:
      operationId: comments_api_v1_comments_list
      description: API viewset for managing comments with filtering, searching, and
        pagination.
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: post
        schema:
          type: integer
      - in: query
        name: recommend
        schema:
          type: string
          enum:
          - 'no'
          - 'yes'
        description: |-
          * `yes` - I recommend this post
          * `no` - I don't recommend this post
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - comments
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommentList'
          description: ''
    post:
      operationId: comments_api_v1_comments_create
      description: API viewset for managing comments with filtering, searching, and
        pagination.
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
  /comments/api/v1/comments/{id}/:
    get:
      operationId: comments_api_v1_comments_retrieve
      description: API viewset for managing comments with filtering, searching, and
        pagination.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - comments
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    put:
      operationId: comments_api_v1_comments_update
      description: API viewset for managing comments with filtering, searching, and
        pagination.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    patch:
      operationId: comments_api_v1_comments_partial_update
      description: API viewset for managing comments with filtering, searching, and
        pagination.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedComment'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    delete:
      operationId: comments_api_v1_comments_destroy
      description: API viewset for managing comments with filtering, searching, and
        pagination.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - comments
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Category:
      type: object
      description: add a field to show the posts of each category
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        posts:
          type: string
          readOnly: true
        absolute_url:
          type: string
          readOnly: true
      required:
      - absolute_url
      - id
      - name
      - posts
    Comment:
      type: object
      description: a read only field to get the url of comment instance
      properties:
        id:
          type: integer
          readOnly: true
        post:
          type: string
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          readOnly: true
        subject:
          type: string
          maxLength: 255
        snippet:
          type: string
          readOnly: true
        absolute_url:
          type: string
          readOnly: true
        message:
          type: string
        recommend:
          $ref: '#/components/schemas/RecommendEnum'
        approved:
          type: boolean
          readOnly: true
        created_date:
          type: string
          format: date-time
          readOnly: true
        updated_date:
          type: string
          format: date-time
          readOnly: true
      required:
      - absolute_url
      - approved
      - created_date
      - email
      - id
      - message
      - post
      - recommend
      - snippet
      - subject
      - updated_date
    PaginatedCategoryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    PaginatedCommentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    PaginatedPostList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Post'
    PatchedCategory:
      type: object
      description: add a field to show the posts of each category
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        posts:
          type: string
          readOnly: true
        absolute_url:
          type: string
          readOnly: true
    PatchedComment:
      type: object
      description: a read only field to get the url of comment instance
      properties:
        id:
          type: integer
          readOnly: true
        post:
          type: string
          readOnly: true
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          readOnly: true
        subject:
          type: string
          maxLength: 255
        snippet:
          type: string
          readOnly: true
        absolute_url:
          type: string
          readOnly: true
        message:
          type: string
        recommend:
          $ref: '#/components/schemas/RecommendEnum'
        approved:
          type: boolean
          readOnly: true
        created_date:
          type: string
          format: date-time
          readOnly: true
        updated_date:
          type: string
          format: date-time
          readOnly: true
    PatchedPost:
      type: object
      description: a read only field to get the url of post instance
      properties:
        id:
          type: integer
          readOnly: true
        author:
          type: string
          readOnly: true
        title:
          type: string
          maxLength: 255
        image:
          type: string
          format: uri
          nullable: true
        snippet:
          type: string
          readOnly: true
        absolute_url:
          type: string
          readOnly: true
        content:
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          readOnly: true
        counted_views:
          type: integer
          readOnly: true
        category:
          type: array
          items:
            type: string
        created_date:
          type: string
          format: date-time
          readOnly: true
        updated_date:
          type: string
          format: date-time
          readOnly: true
        published_date:
          type: string
          format: date-time
    Post:
      type: object
      description: a read only field to get the url of post instance
      properties:
        id:
          type: integer
          readOnly: true
        author:
          type: string
          readOnly: true
        title:
          type: string
          maxLength: 255
        image:
          type: string
          format: uri
          nullable: true
        snippet:
          type: string
          readOnly: true
        absolute_url:
          type: string
          readOnly: true
        content:
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          readOnly: true
        counted_views:
          type: integer
          readOnly: true
        category:
          type: array
          items:
            type: string
        created_date:
          type: string
          format: date-time
          readOnly: true
        updated_date:
          type: string
          format: date-time
          readOnly: true
        published_date:
          type: string
          format: date-time
      required:
      - absolute_url
      - author
      - category
      - content
      - counted_views
      - created_date
      - id
      - published_date
      - snippet
      - status
      - title
      - updated_date
    RecommendEnum:
      enum:
      - 'yes'
      - 'no'
      type: string
      description: |-
        * `yes` - I recommend this post
        * `no` - I don't recommend this post
    StatusEnum:
      enum:
      - drf
      - pub
      type: string
      description: |-
        * `drf` - Draft
        * `pub` - Published
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
